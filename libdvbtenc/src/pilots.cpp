/*
*
*    DVB-T Encoder written in c++
*    Copyright (C) 2014  Patrick Rudolph <siro@das-labor.org>
*
*    This program is free software; you can redistribute it and/or modify it under the terms 
*    of the GNU General Public License as published by the Free Software Foundation; either version 3 
*    of the License, or (at your option) any later version.
*
*    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
*    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*    See the GNU General Public License for more details.
*
*    You should have received a copy of the GNU General Public License along with this program; 
*    if not, see <http://www.gnu.org/licenses/>.
*
*/

#include "pilots.hpp"

using namespace std;

DVBT_pilots::DVBT_pilots(int frame, int symbol, DVBT_tps *dvbt_tps, DVBT_settings *dvbt_settings)
{
	int i,j,k;
static const int tpspilots[68] = { 34, 50, 209, 346, 413, 569, 595, 688, 790, 901, 1073, 1219, 1262, 1286, 1469, 1594, 1687, 1738, 
				1754, 1913, 2050, 2117, 2273, 2299, 2392, 2494, 2605, 2777, 2923, 2966, 2990, 3173, 3298, 3391, 3442, 
				3458, 3617, 3754, 3821, 3977, 4003, 4096, 4198, 4309, 4481, 4627, 4670, 4694, 4877, 5002, 5095, 
				5146, 5162, 5321, 5458, 5525, 5681, 5707, 5800, 5902, 6013, 6185, 6331, 6374, 6398, 6581, 6706, 6799 };

				
static const int contpilots[177] = { 0, 48,54,87,141,156,192,201,255,279,282,333,432,450,483,525,531,618,636,714,759,765,780,804,873,888,918,
				939,942,969,984,1050,1101,1107,1110,1137,1140,1146,1206,1269,1323,1377,1491,1683,1704,1752,1758,1791,
				1845,1860,1896,1905,1959,1983,1986,2037,2136,2154,2187,2229,2235,2322,2340,2418,2463,2469,2484,2508,2577,
				2592,2622,2643,2646,2673,2688,2754,2805,2811,2814,2841,2844,2850,2910,2973,3027,3081,3195,3387,3408,
				3456,3462,3495,3549,3564,3600,3609,3663,3687,3690,3741,3840,3858,3891,3933,3939,4026,4044,4122,4167,4173,
				4188,4212,4281,4296,4326,4347,4350,4377,4392,4458,4509,4515,4518,4545,4548,4554,4614,4677,4731,4785,
				4899,5091,5112,5160,5166,5199,5253,5268,5304,5313,5367,5391,5394,5445,5544,5562,5595,5637,5643,5730,5748,
				5826,5871,5877,5892,5916,5985,6000,6030,6051,6054,6081,6096,6162,6213,6219,6222,6249,6252,6258,6318,
				6381,6435,6489,6603,6795, 6816 };
				
static const int scatpilots[4][568] = {
					{ 12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 
					288, 300, 312, 324, 336, 348, 360, 372, 384, 396, 408, 420, 432, 444, 456, 468, 480, 492, 504, 516, 528, 540, 552, 
					564, 576, 588, 600, 612, 624, 636, 648, 660, 672, 684, 696, 708, 720, 732, 744, 756, 768, 780, 792, 804, 816, 828, 
					840, 852, 864, 876, 888, 900, 912, 924, 936, 948, 960, 972, 984, 996, 1008, 1020, 1032, 1044, 1056, 1068, 1080, 1092, 
					1104, 1116, 1128, 1140, 1152, 1164, 1176, 1188, 1200, 1212, 1224, 1236, 1248, 1260, 1272, 1284, 1296, 1308, 1320, 
					1332, 1344, 1356, 1368, 1380, 1392, 1404, 1416, 1428, 1440, 1452, 1464, 1476, 1488, 1500, 1512, 1524, 1536, 1548, 
					1560, 1572, 1584, 1596, 1608, 1620, 1632, 1644, 1656, 1668, 1680, 1692, 1704, 1716, 1728, 1740, 1752, 1764, 1776, 
					1788, 1800, 1812, 1824, 1836, 1848, 1860, 1872, 1884, 1896, 1908, 1920, 1932, 1944, 1956, 1968, 1980, 1992, 2004, 
					2016, 2028, 2040, 2052, 2064, 2076, 2088, 2100, 2112, 2124, 2136, 2148, 2160, 2172, 2184, 2196, 2208, 2220, 2232, 
					2244, 2256, 2268, 2280, 2292, 2304, 2316, 2328, 2340, 2352, 2364, 2376, 2388, 2400, 2412, 2424, 2436, 2448, 2460, 
					2472, 2484, 2496, 2508, 2520, 2532, 2544, 2556, 2568, 2580, 2592, 2604, 2616, 2628, 2640, 2652, 2664, 2676, 2688, 
					2700, 2712, 2724, 2736, 2748, 2760, 2772, 2784, 2796, 2808, 2820, 2832, 2844, 2856, 2868, 2880, 2892, 2904, 2916, 
					2928, 2940, 2952, 2964, 2976, 2988, 3000, 3012, 3024, 3036, 3048, 3060, 3072, 3084, 3096, 3108, 3120, 3132, 3144, 
					3156, 3168, 3180, 3192, 3204, 3216, 3228, 3240, 3252, 3264, 3276, 3288, 3300, 3312, 3324, 3336, 3348, 3360, 3372, 
					3384, 3396, 3408, 3420, 3432, 3444, 3456, 3468, 3480, 3492, 3504, 3516, 3528, 3540, 3552, 3564, 3576, 3588, 3600, 
					3612, 3624, 3636, 3648, 3660, 3672, 3684, 3696, 3708, 3720, 3732, 3744, 3756, 3768, 3780, 3792, 3804, 3816, 3828, 
					3840, 3852, 3864, 3876, 3888, 3900, 3912, 3924, 3936, 3948, 3960, 3972, 3984, 3996, 4008, 4020, 4032, 4044, 4056, 
					4068, 4080, 4092, 4104, 4116, 4128, 4140, 4152, 4164, 4176, 4188, 4200, 4212, 4224, 4236, 4248, 4260, 4272, 4284, 
					4296, 4308, 4320, 4332, 4344, 4356, 4368, 4380, 4392, 4404, 4416, 4428, 4440, 4452, 4464, 4476, 4488, 4500, 4512, 
					4524, 4536, 4548, 4560, 4572, 4584, 4596, 4608, 4620, 4632, 4644, 4656, 4668, 4680, 4692, 4704, 4716, 4728, 4740, 
					4752, 4764, 4776, 4788, 4800, 4812, 4824, 4836, 4848, 4860, 4872, 4884, 4896, 4908, 4920, 4932, 4944, 4956, 4968, 
					4980, 4992, 5004, 5016, 5028, 5040, 5052, 5064, 5076, 5088, 5100, 5112, 5124, 5136, 5148, 5160, 5172, 5184, 5196, 
					5208, 5220, 5232, 5244, 5256, 5268, 5280, 5292, 5304, 5316, 5328, 5340, 5352, 5364, 5376, 5388, 5400, 5412, 5424, 
					5436, 5448, 5460, 5472, 5484, 5496, 5508, 5520, 5532, 5544, 5556, 5568, 5580, 5592, 5604, 5616, 5628, 5640, 5652, 
					5664, 5676, 5688, 5700, 5712, 5724, 5736, 5748, 5760, 5772, 5784, 5796, 5808, 5820, 5832, 5844, 5856, 5868, 5880, 
					5892, 5904, 5916, 5928, 5940, 5952, 5964, 5976, 5988, 6000, 6012, 6024, 6036, 6048, 6060, 6072, 6084, 6096, 6108, 
					6120, 6132, 6144, 6156, 6168, 6180, 6192, 6204, 6216, 6228, 6240, 6252, 6264, 6276, 6288, 6300, 6312, 6324, 6336, 
					6348, 6360, 6372, 6384, 6396, 6408, 6420, 6432, 6444, 6456, 6468, 6480, 6492, 6504, 6516, 6528, 6540, 6552, 6564, 
					6576, 6588, 6600, 6612, 6624, 6636, 6648, 6660, 6672, 6684, 6696, 6708, 6720, 6732, 6744, 6756, 6768, 6780, 6792, 
					6804 },
					{ 3, 15, 27, 39, 51, 63, 75, 87, 99, 111, 123, 135, 147, 159, 171, 183, 195, 207, 219, 231, 243, 255, 267, 279, 
					291, 303, 315, 327, 339, 351, 363, 375, 387, 399, 411, 423, 435, 447, 459, 471, 483, 495, 507, 519, 531, 543, 555, 
					567, 579, 591, 603, 615, 627, 639, 651, 663, 675, 687, 699, 711, 723, 735, 747, 759, 771, 783, 795, 807, 819, 831,
					843, 855, 867, 879, 891, 903, 915, 927, 939, 951, 963, 975, 987, 999, 1011, 1023, 1035, 1047, 1059, 1071, 1083, 1095, 
					1107, 1119, 1131, 1143, 1155, 1167, 1179, 1191, 1203, 1215, 1227, 1239, 1251, 1263, 1275, 1287, 1299, 1311, 1323,
					1335, 1347, 1359, 1371, 1383, 1395, 1407, 1419, 1431, 1443, 1455, 1467, 1479, 1491, 1503, 1515, 1527, 1539, 1551, 
					1563, 1575, 1587, 1599, 1611, 1623, 1635, 1647, 1659, 1671, 1683, 1695, 1707, 1719, 1731, 1743, 1755, 1767, 1779, 
					1791, 1803, 1815, 1827, 1839, 1851, 1863, 1875, 1887, 1899, 1911, 1923, 1935, 1947, 1959, 1971, 1983, 1995, 2007, 
					2019, 2031, 2043, 2055, 2067, 2079, 2091, 2103, 2115, 2127, 2139, 2151, 2163, 2175, 2187, 2199, 2211, 2223, 2235, 
					2247, 2259, 2271, 2283, 2295, 2307, 2319, 2331, 2343, 2355, 2367, 2379, 2391, 2403, 2415, 2427, 2439, 2451, 2463, 
					2475, 2487, 2499, 2511, 2523, 2535, 2547, 2559, 2571, 2583, 2595, 2607, 2619, 2631, 2643, 2655, 2667, 2679, 2691, 
					2703, 2715, 2727, 2739, 2751, 2763, 2775, 2787, 2799, 2811, 2823, 2835, 2847, 2859, 2871, 2883, 2895, 2907, 2919, 
					2931, 2943, 2955, 2967, 2979, 2991, 3003, 3015, 3027, 3039, 3051, 3063, 3075, 3087, 3099, 3111, 3123, 3135, 3147, 
					3159, 3171, 3183, 3195, 3207, 3219, 3231, 3243, 3255, 3267, 3279, 3291, 3303, 3315, 3327, 3339, 3351, 3363, 3375, 
					3387, 3399, 3411, 3423, 3435, 3447, 3459, 3471, 3483, 3495, 3507, 3519, 3531, 3543, 3555, 3567, 3579, 3591, 3603, 
					3615, 3627, 3639, 3651, 3663, 3675, 3687, 3699, 3711, 3723, 3735, 3747, 3759, 3771, 3783, 3795, 3807, 3819, 3831, 
					3843, 3855, 3867, 3879, 3891, 3903, 3915, 3927, 3939, 3951, 3963, 3975, 3987, 3999, 4011, 4023, 4035, 4047, 4059, 
					4071, 4083, 4095, 4107, 4119, 4131, 4143, 4155, 4167, 4179, 4191, 4203, 4215, 4227, 4239, 4251, 4263, 4275, 4287, 
					4299, 4311, 4323, 4335, 4347, 4359, 4371, 4383, 4395, 4407, 4419, 4431, 4443, 4455, 4467, 4479, 4491, 4503, 4515, 
					4527, 4539, 4551, 4563, 4575, 4587, 4599, 4611, 4623, 4635, 4647, 4659, 4671, 4683, 4695, 4707, 4719, 4731, 4743, 
					4755, 4767, 4779, 4791, 4803, 4815, 4827, 4839, 4851, 4863, 4875, 4887, 4899, 4911, 4923, 4935, 4947, 4959, 4971, 
					4983, 4995, 5007, 5019, 5031, 5043, 5055, 5067, 5079, 5091, 5103, 5115, 5127, 5139, 5151, 5163, 5175, 5187, 5199, 
					5211, 5223, 5235, 5247, 5259, 5271, 5283, 5295, 5307, 5319, 5331, 5343, 5355, 5367, 5379, 5391, 5403, 5415, 5427, 
					5439, 5451, 5463, 5475, 5487, 5499, 5511, 5523, 5535, 5547, 5559, 5571, 5583, 5595, 5607, 5619, 5631, 5643, 5655, 
					5667, 5679, 5691, 5703, 5715, 5727, 5739, 5751, 5763, 5775, 5787, 5799, 5811, 5823, 5835, 5847, 5859, 5871, 5883, 
					5895, 5907, 5919, 5931, 5943, 5955, 5967, 5979, 5991, 6003, 6015, 6027, 6039, 6051, 6063, 6075, 6087, 6099, 6111, 
					6123, 6135, 6147, 6159, 6171, 6183, 6195, 6207, 6219, 6231, 6243, 6255, 6267, 6279, 6291, 6303, 6315, 6327, 6339, 
					6351, 6363, 6375, 6387, 6399, 6411, 6423, 6435, 6447, 6459, 6471, 6483, 6495, 6507, 6519, 6531, 6543, 6555, 6567, 
					6579, 6591, 6603, 6615, 6627, 6639, 6651, 6663, 6675, 6687, 6699, 6711, 6723, 6735, 6747, 6759, 6771, 6783, 6795, 
					6807 },
					{ 6, 18, 30, 42, 54, 66, 78, 90, 102, 114, 126, 138, 150, 162, 174, 186, 198, 210, 222, 234, 246, 258, 270, 282, 294,
					306, 318, 330, 342, 354, 366, 378, 390, 402, 414, 426, 438, 450, 462, 474, 486, 498, 510, 522, 534, 546, 558, 570, 582,
					594, 606, 618, 630, 642, 654, 666, 678, 690, 702, 714, 726, 738, 750, 762, 774, 786, 798, 810, 822, 834, 846, 858, 870,
					882, 894, 906, 918, 930, 942, 954, 966, 978, 990, 1002, 1014, 1026, 1038, 1050, 1062, 1074, 1086, 1098, 1110, 1122, 1134,
					1146, 1158, 1170, 1182, 1194, 1206, 1218, 1230, 1242, 1254, 1266, 1278, 1290, 1302, 1314, 1326, 1338, 1350, 1362, 1374,
					1386, 1398, 1410, 1422, 1434, 1446, 1458, 1470, 1482, 1494, 1506, 1518, 1530, 1542, 1554, 1566, 1578, 1590, 1602, 1614,
					1626, 1638, 1650, 1662, 1674, 1686, 1698, 1710, 1722, 1734, 1746, 1758, 1770, 1782, 1794, 1806, 1818, 1830, 1842, 1854,
					1866, 1878, 1890, 1902, 1914, 1926, 1938, 1950, 1962, 1974, 1986, 1998, 2010, 2022, 2034, 2046, 2058, 2070, 2082, 2094,
					2106, 2118, 2130, 2142, 2154, 2166, 2178, 2190, 2202, 2214, 2226, 2238, 2250, 2262, 2274, 2286, 2298, 2310, 2322, 2334,
					2346, 2358, 2370, 2382, 2394, 2406, 2418, 2430, 2442, 2454, 2466, 2478, 2490, 2502, 2514, 2526, 2538, 2550, 2562, 2574,
					2586, 2598, 2610, 2622, 2634, 2646, 2658, 2670, 2682, 2694, 2706, 2718, 2730, 2742, 2754, 2766, 2778, 2790, 2802, 2814,
					2826, 2838, 2850, 2862, 2874, 2886, 2898, 2910, 2922, 2934, 2946, 2958, 2970, 2982, 2994, 3006, 3018, 3030, 3042, 3054,
					3066, 3078, 3090, 3102, 3114, 3126, 3138, 3150, 3162, 3174, 3186, 3198, 3210, 3222, 3234, 3246, 3258, 3270, 3282, 3294,
					3306, 3318, 3330, 3342, 3354, 3366, 3378, 3390, 3402, 3414, 3426, 3438, 3450, 3462, 3474, 3486, 3498, 3510, 3522, 3534,
					3546, 3558, 3570, 3582, 3594, 3606, 3618, 3630, 3642, 3654, 3666, 3678, 3690, 3702, 3714, 3726, 3738, 3750, 3762, 3774,
					3786, 3798, 3810, 3822, 3834, 3846, 3858, 3870, 3882, 3894, 3906, 3918, 3930, 3942, 3954, 3966, 3978, 3990, 4002, 4014,
					4026, 4038, 4050, 4062, 4074, 4086, 4098, 4110, 4122, 4134, 4146, 4158, 4170, 4182, 4194, 4206, 4218, 4230, 4242, 4254,
					4266, 4278, 4290, 4302, 4314, 4326, 4338, 4350, 4362, 4374, 4386, 4398, 4410, 4422, 4434, 4446, 4458, 4470, 4482, 4494,
					4506, 4518, 4530, 4542, 4554, 4566, 4578, 4590, 4602, 4614, 4626, 4638, 4650, 4662, 4674, 4686, 4698, 4710, 4722, 4734,
					4746, 4758, 4770, 4782, 4794, 4806, 4818, 4830, 4842, 4854, 4866, 4878, 4890, 4902, 4914, 4926, 4938, 4950, 4962, 4974, 
					4986, 4998, 5010, 5022, 5034, 5046, 5058, 5070, 5082, 5094, 5106, 5118, 5130, 5142, 5154, 5166, 5178, 5190, 5202, 5214, 
					5226, 5238, 5250, 5262, 5274, 5286, 5298, 5310, 5322, 5334, 5346, 5358, 5370, 5382, 5394, 5406, 5418, 5430, 5442, 5454, 
					5466, 5478, 5490, 5502, 5514, 5526, 5538, 5550, 5562, 5574, 5586, 5598, 5610, 5622, 5634, 5646, 5658, 5670, 5682, 5694, 
					5706, 5718, 5730, 5742, 5754, 5766, 5778, 5790, 5802, 5814, 5826, 5838, 5850, 5862, 5874, 5886, 5898, 5910, 5922, 5934, 
					5946, 5958, 5970, 5982, 5994, 6006, 6018, 6030, 6042, 6054, 6066, 6078, 6090, 6102, 6114, 6126, 6138, 6150, 6162, 6174, 
					6186, 6198, 6210, 6222, 6234, 6246, 6258, 6270, 6282, 6294, 6306, 6318, 6330, 6342, 6354, 6366, 6378, 6390, 6402, 6414, 
					6426, 6438, 6450, 6462, 6474, 6486, 6498, 6510, 6522, 6534, 6546, 6558, 6570, 6582, 6594, 6606, 6618, 6630, 6642, 6654, 
					6666, 6678, 6690, 6702, 6714, 6726, 6738, 6750, 6762, 6774, 6786, 6798, 6810 },
					{ 9, 21, 33, 45, 57, 69, 81, 93, 105, 117, 129, 141, 153, 165, 177, 189, 201, 213, 225, 237, 249, 261, 273, 285, 297, 309, 
					321, 333, 345, 357, 369, 381, 393, 405, 417, 429, 441, 453, 465, 477, 489, 501, 513, 525, 537, 549, 561, 573, 585, 597, 609, 
					621, 633, 645, 657, 669, 681, 693, 705, 717, 729, 741, 753, 765, 777, 789, 801, 813, 825, 837, 849, 861, 873, 885, 897, 909, 
					921, 933, 945, 957, 969, 981, 993, 1005, 1017, 1029, 1041, 1053, 1065, 1077, 1089, 1101, 1113, 1125, 1137, 1149, 1161, 1173, 
					1185, 1197, 1209, 1221, 1233, 1245, 1257, 1269, 1281, 1293, 1305, 1317, 1329, 1341, 1353, 1365, 1377, 1389, 1401, 1413, 
					1425, 1437, 1449, 1461, 1473, 1485, 1497, 1509, 1521, 1533, 1545, 1557, 1569, 1581, 1593, 1605, 1617, 1629, 1641, 1653, 
					1665, 1677, 1689, 1701, 1713, 1725, 1737, 1749, 1761, 1773, 1785, 1797, 1809, 1821, 1833, 1845, 1857, 1869, 1881, 1893, 
					1905, 1917, 1929, 1941, 1953, 1965, 1977, 1989, 2001, 2013, 2025, 2037, 2049, 2061, 2073, 2085, 2097, 2109, 2121, 2133, 
					2145, 2157, 2169, 2181, 2193, 2205, 2217, 2229, 2241, 2253, 2265, 2277, 2289, 2301, 2313, 2325, 2337, 2349, 2361, 2373, 
					2385, 2397, 2409, 2421, 2433, 2445, 2457, 2469, 2481, 2493, 2505, 2517, 2529, 2541, 2553, 2565, 2577, 2589, 2601, 2613, 
					2625, 2637, 2649, 2661, 2673, 2685, 2697, 2709, 2721, 2733, 2745, 2757, 2769, 2781, 2793, 2805, 2817, 2829, 2841, 2853, 
					2865, 2877, 2889, 2901, 2913, 2925, 2937, 2949, 2961, 2973, 2985, 2997, 3009, 3021, 3033, 3045, 3057, 3069, 3081, 3093, 
					3105, 3117, 3129, 3141, 3153, 3165, 3177, 3189, 3201, 3213, 3225, 3237, 3249, 3261, 3273, 3285, 3297, 3309, 3321, 3333, 
					3345, 3357, 3369, 3381, 3393, 3405, 3417, 3429, 3441, 3453, 3465, 3477, 3489, 3501, 3513, 3525, 3537, 3549, 3561, 3573, 
					3585, 3597, 3609, 3621, 3633, 3645, 3657, 3669, 3681, 3693, 3705, 3717, 3729, 3741, 3753, 3765, 3777, 3789, 3801, 3813, 
					3825, 3837, 3849, 3861, 3873, 3885, 3897, 3909, 3921, 3933, 3945, 3957, 3969, 3981, 3993, 4005, 4017, 4029, 4041, 4053, 
					4065, 4077, 4089, 4101, 4113, 4125, 4137, 4149, 4161, 4173, 4185, 4197, 4209, 4221, 4233, 4245, 4257, 4269, 4281, 4293,
					4305, 4317, 4329, 4341, 4353, 4365, 4377, 4389, 4401, 4413, 4425, 4437, 4449, 4461, 4473, 4485, 4497, 4509, 4521, 4533, 
					4545, 4557, 4569, 4581, 4593, 4605, 4617, 4629, 4641, 4653, 4665, 4677, 4689, 4701, 4713, 4725, 4737, 4749, 4761, 4773, 
					4785, 4797, 4809, 4821, 4833, 4845, 4857, 4869, 4881, 4893, 4905, 4917, 4929, 4941, 4953, 4965, 4977, 4989, 5001, 5013, 
					5025, 5037, 5049, 5061, 5073, 5085, 5097, 5109, 5121, 5133, 5145, 5157, 5169, 5181, 5193, 5205, 5217, 5229, 5241, 5253, 
					5265, 5277, 5289, 5301, 5313, 5325, 5337, 5349, 5361, 5373, 5385, 5397, 5409, 5421, 5433, 5445, 5457, 5469, 5481, 5493,
					5505, 5517, 5529, 5541, 5553, 5565, 5577, 5589, 5601, 5613, 5625, 5637, 5649, 5661, 5673, 5685, 5697, 5709, 5721, 5733, 
					5745, 5757, 5769, 5781, 5793, 5805, 5817, 5829, 5841, 5853, 5865, 5877, 5889, 5901, 5913, 5925, 5937, 5949, 5961, 5973, 
					5985, 5997, 6009, 6021, 6033, 6045, 6057, 6069, 6081, 6093, 6105, 6117, 6129, 6141, 6153, 6165, 6177, 6189, 6201, 6213, 
					6225, 6237, 6249, 6261, 6273, 6285, 6297, 6309, 6321, 6333, 6345, 6357, 6369, 6381, 6393, 6405, 6417, 6429, 6441, 6453, 
					6465, 6477, 6489, 6501, 6513, 6525, 6537, 6549, 6561, 6573, 6585, 6597, 6609, 6621, 6633, 6645, 6657, 6669, 6681, 6693, 
					6705, 6717, 6729, 6741, 6753, 6765, 6777, 6789, 6801, 6813 },
				};

	this->pbrs_pilots = new unsigned char[dvbt_settings->ofdmcarriers];
	this->generate_prbs(this->pbrs_pilots,dvbt_settings->ofdmcarriers);

	//constants 
	this->LEN_TPSPILOTS_2K = 17;
	this->LEN_TPSPILOTS_8K = 68;

	this->LEN_CONTPILOTS_2K = 45;
	this->LEN_CONTPILOTS_8K = 177;

	this->LEN_SCATPILOTS_2K = 142;
	this->LEN_SCATPILOTS_8K = 568;
	
	this->dvbt_settings = dvbt_settings;
	
	//overallocated, just new ofdmcarriers
	this->channels = new dvbt_complex_t[dvbt_settings->ofdmmode];
	this->data_pointer = new int[dvbt_settings->ofdmuseablecarriers];
	
	j = 0;
	if( dvbt_settings->ofdmmode == 2048 )
	{
		for(i=0;i<dvbt_settings->ofdmcarriers;i++)
		{
			bool found = false;
			/* insert tps pilots - normal power level */
			for( k=0; k < (this->LEN_TPSPILOTS_2K) && (tpspilots[k] <= i); k++)
			{
				if(tpspilots[k] == i)
				{
						if(pbrs_pilots[i])
							this->channels[i].x = -dvbt_tps->dpsktpsarray[frame][symbol];
						else
							this->channels[i].x = dvbt_tps->dpsktpsarray[frame][symbol];
					this->channels[i].y = 0.0f;
					found = true;
					break;
				}
			}
			if(found)
				continue;
			/* insert scat pilots - boosted power level */
			for( k=0; (k < this->LEN_SCATPILOTS_2K) && (scatpilots[symbol &0x03][k] <= i); k++)
			{
				if(scatpilots[symbol &0x03][k] == i)
				{
					if(pbrs_pilots[i])
						this->channels[i].x = -(4.0f / 3.0f);
					else
						this->channels[i].x = (4.0f / 3.0f);
					this->channels[i].y = 0.0f;
					found = true;
					break;
				}
			}
			if(found)
				continue;
			/* insert cont pilots - boosted power level */
			for( k=0; (k < this->LEN_CONTPILOTS_2K) && (contpilots[k] <= i); k++)
			{
				if(contpilots[k] == i)
				{
					if(pbrs_pilots[i])
						this->channels[i].x = -(4.0f / 3.0f);
					else
						this->channels[i].x = (4.0f / 3.0f);
					this->channels[i].y = 0.0f;
					found = true;
					break;
				}
			}
			if(found)
				continue;
			/* save the data offset */
			this->data_pointer[j] = i;
			j++;
			
		}
	}
	else
	{
		for(i=0;i<dvbt_settings->ofdmcarriers;i++)
		{
			bool found = false;
			/* insert tps pilots - normal power level */
			for( k=0; (k < this->LEN_TPSPILOTS_8K) && (tpspilots[k] <= i); k++)
			{
				if(tpspilots[k] == i)
				{
					if(pbrs_pilots[i])
						this->channels[i].x = -dvbt_tps->dpsktpsarray[frame][symbol];
					else
						this->channels[i].x = dvbt_tps->dpsktpsarray[frame][symbol];
					 this->channels[i].y = 0.0f;
					found = true;
					break;
				}
			}
			if(found)
				continue;
			/* insert scat pilots - boosted power level */
			for( k=0; (k < this->LEN_SCATPILOTS_8K) && (scatpilots[symbol % 4][k] <= i); k++)
			{
				if(scatpilots[symbol % 4][k] == i)
				{
					if(pbrs_pilots[i])
						this->channels[i].x = -(4.0f / 3.0f);
					else
						this->channels[i].x = (4.0f / 3.0f);
					this->channels[i].y = 0.0f;
					found = true;
					break;
				}
			}
			if(found)
				continue;
			/* insert cont pilots - boosted power level */
			for( k=0; (k < this->LEN_CONTPILOTS_8K) && (contpilots[k] <= i); k++)
			{
				if(contpilots[k] == i)
				{
					if(pbrs_pilots[i])
						this->channels[i].x = -(4.0f / 3.0f);
					else
						this->channels[i].x = (4.0f / 3.0f);
					this->channels[i].y = 0.0f;
					found = true;
					break;
				}
			}
			if(found)
				continue;
			/* save the data offset */
			this->data_pointer[j] = i;
			j++;
		}
	}
	
	delete[] this->pbrs_pilots;
}

DVBT_pilots::~DVBT_pilots()
{
	delete[] this->channels;
	delete[] this->data_pointer;
}

    
void DVBT_pilots::encode(dvbt_complex_t *in, dvbt_complex_t *out)
{
	memcpy(out,this->channels,this->dvbt_settings->ofdmcarriers*sizeof(dvbt_complex_t));
	
	for(unsigned int i=0; i < dvbt_settings->ofdmuseablecarriers; i++)
	{
		memcpy(&out[this->data_pointer[i]],&in[i],sizeof(dvbt_complex_t));
	}
}

// NOTICE: this code was taken from 
// Copyright 2013 <Bogdan Diaconescu, yo3iiu@yo3iiu.ro>.
// https://github.com/BogdanDIA/gr-dvbt/blob/master/lib/reference_signals_impl.cc

 /*
* Generate PRBS sequence
* X^11 + X^2 + 1
* en 300 744 - section 4.5.2
*/
void
DVBT_pilots::generate_prbs(unsigned char *d_wk, int ofdmcarriers)
{
  // init PRBS register with 1s
  unsigned int reg_prbs = (1 << 11) - 1;

  for (int k = 0; k < ofdmcarriers; k++)
  {
	d_wk[k] = (char)(reg_prbs & 0x01);
	int new_bit = ((reg_prbs >> 2) ^ (reg_prbs >> 0)) & 0x01;
	reg_prbs = (reg_prbs >> 1) | (new_bit << 10);
  }
}
    
